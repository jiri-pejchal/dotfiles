[commit]
    verbose = true
[core]
    editor = vim +1 +start
    whitespace = space-before-tab,tab-in-indent,trailing-space
[diff]
    algorithm = histogram
    # shift the hunk boundary
    indentHeuristic = true
    # do not show any source or destination prefix
    noprefix = true
[push]
    default = current
[alias]
    a = add
    aa = add --all
    # interactively select chunks of code to add to the index
    ap = add --patch
    all = commit -a
    alias = config --get-regexp ^alias.
    amend = commit --verbose --amend
    b = branch
    ba = branch --all
    branches = branch --all
    brs = branch --all
    bd = branch -d
    bD = branch -D
    br = branch -r
    ci = commit --verbose
    #bclean = "!f() { git branch --merged ${1-master} | grep -v release | grep -v " ${1-master}$" | xargs -r git branch -d; }; f"
    # show untracked files
    st = status -u
    ci = commit --verbose
    cif = commit --verbose --fixup
    cia = commit --verbose --amend
    ca = commit --verbose --amend
    co = checkout
    cob = checkout -b
    cp = cherry-pick
    cpa = cherry-pick --abort
    cpc = cherry-pick --continue
    d = diff
    dc = diff --cached
    dw = diff --word-diff
    ec = config --global -e
    l = log
    latest = for-each-ref --count=30 --sort=-committerdate refs/heads/ --format=`%(refname:short)`
    m = merge
    ma = merge --abort
    lf = log -g
    pf = push --force-with-lease
    poh = push origin HEAD
    ri = rebase --interactive --autosquash
    ra = rebase --abort
    rc = rebase --continue
    rs = reset --soft
    root = rev-parse --show-toplevel
    remotes = remote --verbose
    # stash ignored and untracked files too
    sa = stash --all
    sl = stash list
    sp = stash pop
    sw = switch
    ff = merge --ff-only
    pulff = pull --ff-only
    fa = fetch --all
    lol = log --graph --decorate --pretty=oneline --abbrev-commit
    lola = log --graph --decorate --pretty=oneline --abbrev-commit --all
    pom = push origin master
    type = cat-file -t
    dump = cat-file -p
    unstage = reset HEAD --
    up = pull --rebase --prune
    lg = log --graph --all --format='%C(auto)%h%d %C(auto,bold black)<%C(reset)%C(auto,blue)%aE%C(auto,bold black)>%C(reset) %s %C(auto,bold black)(%C(reset)%C(auto,green)%ar%C(auto,bold black))%C(reset)'
    whoami = config user.email

    # Find branches containing commit
    fb = "!f() { git branch -a --contains $1; }; f"

    # Find tags containing commit
    ft = "!f() { git describe --always --contains $1; }; f"

    # Find commits by source code
    fc = "!f() { git log --pretty=format:'%C(yellow)%h  %Cblue%ad  %Creset%s%Cgreen  [%cn] %Cred%d' --decorate --date=short -S$1; }; f"

    # Find commits by commit message
    fm = "!f() { git log --pretty=format:'%C(yellow)%h  %Cblue%ad  %Creset%s%Cgreen  [%cn] %Cred%d' --decorate --date=short --grep=$1; }; f"
[interactive]
    singlekey = true
[apply]
    whitespace = fix
[branch]
    autosetuprebase = always
    # show most recently changed branches first
    sort = -committerdate
[include]
    path = ~/.gitconfig.local
[log]
    decorate = auto
[rebase]
    autosquash = true
[rerere]
    enabled = true
[tag]
    # treat tag names as versions
    sort = version:refname
[credential]
    helper = cache
[merge]
    conflictstyle = diff3
[diff]
    renameLimit=456
[init]
    defaultBranch = main
# vim: set ft=gitconfig:
